#!/bin/ruby -Ku
# Copyright(c) 2006 URABE, Shyouhei.
#
# Permission is hereby granted, free of  charge, to any person obtaining a copy
# of  this code, to  deal in  the code  without restriction,  including without
# limitation  the rights  to  use, copy,  modify,  merge, publish,  distribute,
# sublicense, and/or sell copies of the code, and to permit persons to whom the
# code is furnished to do so, subject to the following conditions:
#
#        The above copyright notice and this permission notice shall be
#        included in all copies or substantial portions of the code.
#
# THE  CODE IS  PROVIDED "AS  IS",  WITHOUT WARRANTY  OF ANY  KIND, EXPRESS  OR
# IMPLIED,  INCLUDING BUT  NOT LIMITED  TO THE  WARRANTIES  OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE  AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHOR  OR  COPYRIGHT  HOLDER BE  LIABLE  FOR  ANY  CLAIM, DAMAGES  OR  OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF  OR IN CONNECTION WITH  THE CODE OR THE  USE OR OTHER  DEALINGS IN THE
# CODE.

# you should update rfc-ref.txt everyday.
# 0 0 * * * rsync ftp.rfc-editor.org::rfc-ed-all/rfc-ref.txt /home/ircbot

require 'pathname'

class RFCBot < Nadoka::NDK_Bot
	RFCDIR = Pathname.new('/home/ircbot')
	REFS = RFCDIR + 'rfc-ref.txt'

	private
	def bot_initialize
		@titles = Array.new
		@obsolater = Hash.new
		update_db
	end

	def update_db
		r1 = /^RFC(\d{4}) \|(.+)\| .+, "([^"]+)", .+/
		REFS.each_line do |l|
			next unless m = l.match(r1)
			n, o, t = *m.captures
			i = n.to_i
			@titles[i] = t
			oo = o.strip
			@obsolater[i] = oo unless oo.empty?
		end
	ensure
		@mtime = REFS.mtime
	end

	def answer(i)
		if o = @obsolater[i] 
			sprintf('RFC%d obsoleted by %s - http://tools.ietf.org/html/rfc%u', i, o, i)
		elsif t = @titles[i]
			sprintf('RFC%d: "%s" - http://tools.ietf.org/html/rfc%u', i, t, i)
		else
			raise
		end
	end

	public

	def on_timer t
		update_db if REFS.mtime > @mtime
	end

	def on_privmsg(p, c, s)
		return unless @bot_config[:ch].match(c)
		return if @bot_config[:ch2].match(c)
		return unless m = (/(rfc|RFC)\s*(\d+)/.match(s))
		return if /^biff/.match(s)
		send_notice c, answer(m[2].to_i)
	rescue
		;
	end
end


# Local Variables:
# mode: ruby
# coding: utf-8
# indent-tabs-mode: t
# tab-width: 3
# ruby-indent-level: 3
# fill-column: 79
# default-justification: full
# End:
# vi: ts=3 sw=3
